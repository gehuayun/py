在文件夹下创建git库
git init
在文件夹下创建文本
git add WB
查看文本修改情况
git diff WB
提交修改的文本到仓库
git add WB 
git ststus
git commit -m WB
查看是否提交成功
git status

查看历史版本
git log
or
git log –-pretty=oneline 

git reset --hard HEAD^
git reset --hard HEAD^
git reset --hard HEAD~100 
获取到版本号：
git reflog 
回复版本
gti reset --hard 号
可以丢弃工作区的修改
git checkout -- WB 
提交到暂存区的数据没有丢弃

在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：
第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：

ssh-keygen -t rsa –C “youremail@example.com”



查看分支：git branch
创建分支：git branch name
切换分支：git checkout name
创建+切换分支：git checkout –b name
合并某分支到当前分支：git merge name
删除分支：git branch –d name



git clone url...
、


usage: git [-v | --version] 	[-h | --help] 	[-C <path>] 					[-c <name>=<value>]
           [--exec-path[=<path>]]	 [--html-path] 							[--man-path]	 [--info-path]
           [-p | --paginate | -P | --no-pager]								 [--no-replace-objects]			 [--bare]
           [--git-dir=<path>] 		[--work-tree=<path>]					 [--namespace=<name>]
           [--super-prefix=<path>] 										[--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:




start a working area (see also: git help tutorial)

   clone     Clone a repository into a new directory
Cione一个存储库到一个新的目录

   init      Create an empty Git repository or reinitialize an existing one
创建一个空Git存储库或重新初始化一个现有的存储库




work on the current change (see also: git help everyday)

   add       Add file contents to the index  
前将文件内容添加到索引中

   mv        Move or rename a file, a directory, or a symlink	
移动或重命名文件、目录或符号链接

   restore   Restore working tree files
恢复工作树文件

   rm        Remove files from the working tree and from the index
从工作树和索引中删除文件




examine the history and state (see also: git help revisions)

   bisect    Use binary search to find the commit that introduced a bug
使用二进制搜索查找引入错误的提交

   diff      Show changes between commits, commit and working tree, etc
big显示提交、提交和工作树等之间的更改

   grep      Print lines matching a pattern
打印与模式匹配的行

   log       Show commit logs
显示提交日志

   show      Show various types of objects
显示各种类型的对象

   status    Show the working tree status
显示工作树状态




grow, mark and tweak your common history
成长，标记和调整你们的共同历史

   branch    List, create, or delete branches
列出、创建或删除分支

   commit    Record changes to the repository
记录对存储库的更改

   merge     Join two or more development histories together
将两个或多个开发历史连接在一起

   rebase    Reapply commits on top of another base tip
在另一个基本提示上重新应用提交

   reset     Reset current HEAD to the specified state
重置当前HEAD到指定状态

   switch    Switch branches
切换分支

   tag       Create, list, delete or verify a tag object signed with GPG
创建、列出、删除或验证用GPG签名的标记对象





collaborate (see also: git help workflows)

   fetch     Download objects and refs from another repository
从另一个存储库下载对象和引用

   pull      Fetch from and integrate with another repository or a local branch
从另一个存储库或本地分支获取并与之集成

   push      Update remote refs along with associated objects
更新远程引用和相关对象

'git help -a' and 'git help -g' list available subcommands and some
concept guides. 
See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

'git help -a'和'git help -g'列出了可用的子命令和一些概念指南。
查看'git help <command>'或git help <concept>l以了解特定的子命令或概念。
查看'git help git'了解系统的概述。
